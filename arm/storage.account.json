{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('u')]"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "displayName": "Azure region",
        "description": "See https://azure.microsoft.com/regions/."
      }
    },
    "storageAccountName": {
      "type": "string"
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "skuTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "BlockBlobStorage",
        "FileStorage"
      ]
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Hot",
        "Cool"
      ]
    },
    "httpsOnly": {
      "type": "bool",
      "defaultValue": true
    },
    "hierarchicalEnabled": {
      "type": "bool",
      "defaultValue": false
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "displayName": "Default access action",
        "description": "If set to Allow, the 'Allow access from' setting will be 'All networks' unless VNet and/or IP access restrictions are also specified, in which case it will be Selected virtual networks and IP addresses."
      }
    },
    "bypass": {
      "type": "string",
      "defaultValue": "AzureServices"
    },
    "allowBlobPublicAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "minimumTlsVersion": {
      "type": "string",
      "defaultValue": "TLS1_2",
      "allowedValues": [
        "TLS1_0",
        "TLS1_1",
        "TLS1_2"
      ]
    },
    "keySource": {
      "type": "string",
      "defaultValue": "Microsoft.Storage",
      "allowedValues": [
        "Microsoft.Storage",
        "Microsoft.Keyvault"
      ]
    },
    "allowedSubnetResourceIds": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "displayName": "Comma-delimited list of Subnet resource IDs to allow"
      }
    },
    "allowedIpAddressRanges": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "displayName": "Comma-delimited list of source IP address ranges to allow"
      }
    },
    "defaultAccessAction": {
      "type": "string",
      "defaultValue": "Deny",
      "allowedValues": [
        "Allow",
        "Deny"
      ]
    },
    "blobDeleteRetentionPolicyEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "blobDeleteRetentionDays": {
      "type": "int",
      "defaultValue": 15
    },
    "blobVersioningEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "blobChangeFeedEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "blobRestorePolicyEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "blobRestoreDays": {
      "type": "int",
      "defaultValue": 14
    },
    "blobContainerDeleteRetentionPolicyEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "blobContainerDeleteRetentionDays": {
      "type": "int",
      "defaultValue": 14
    },
    "tags": {
      "type": "object",
      "defaultValue": "[createObject()]"
    }
  },
  "variables": {
    "timeStampTag": {
      "Timestamp": "[parameters('timestamp')]"
    },
    "tags": "[union(parameters('tags'), variables('timeStampTag'))]",
    "publicNetworkAccess": "[if(and(equals(parameters('publicNetworkAccess'), 'Disabled'), or(not(empty(parameters('allowedSubnetResourceIds'))), not(empty(parameters('allowedIpAddressRanges'))))), 'Enabled', 'Disabled')]",
    "allowedSubnetResourceIds": "[if(empty(parameters('allowedSubnetResourceIds')), json('[]'), split(parameters('allowedSubnetResourceIds'), ','))]",
    "allowedIpAddressRanges": "[if(empty(parameters('allowedIpAddressRanges')), json('[]'), split(parameters('allowedIpAddressRanges'), ','))]",
    "subnetAccessAction": "Allow",
    "ipRangeAccessAction": "Allow",
    "apiVersionStorage": "2025-01-01"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('apiVersionStorage')]",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "[parameters('skuTier')]"
      },
      "kind": "[parameters('kind')]",
      "properties": {
        "accessTier": "[parameters('accessTier')]",
        "publicNetworkAccess": "[variables('publicNetworkAccess')]",
        "networkAcls": {
          "bypass": "[parameters('bypass')]",
          "copy": [
            {
              "name": "virtualNetworkRules",
              "count": "[length(variables('allowedSubnetResourceIds'))]",
              "input": {
                "id": "[variables('allowedSubnetResourceIds')[copyIndex('virtualNetworkRules')]]",
                "action": "[variables('subnetAccessAction')]"
              }
            },
            {
              "name": "ipRules",
              "count": "[length(variables('allowedIpAddressRanges'))]",
              "input": {
                "value": "[variables('allowedIpAddressRanges')[copyIndex('ipRules')]]",
                "action": "[variables('ipRangeAccessAction')]"
              }
            }
          ],
          "defaultAction": "[parameters('defaultAccessAction')]"
        },
        "supportsHttpsTrafficOnly": "[parameters('httpsOnly')]",
        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
        "isHnsEnabled": "[parameters('hierarchicalEnabled')]",
        "allowCrossTenantReplication": false,
        "encryption": {
          "services": {
            "blob": {
              "keyType": "Account",
              "enabled": true
            },
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "queue": {
              "keyType": "Account",
              "enabled": true
            },
            "table": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "[parameters('keySource')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "[variables('apiVersionStorage')]",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "[parameters('skuTier')]"
      },
      "properties": {
        "deleteRetentionPolicy": {
          "allowPermanentDelete": false,
          "enabled": "[parameters('blobDeleteRetentionPolicyEnabled')]",
          "days": "[parameters('blobDeleteRetentionDays')]"
        },
        "isVersioningEnabled": "[parameters('blobVersioningEnabled')]",
        "changeFeed": {
          "enabled": "[parameters('blobChangeFeedEnabled')]"
        },
        "restorePolicy": {
          "enabled": "[parameters('blobRestorePolicyEnabled')]",
          "days": "[parameters('blobRestoreDays')]"
        },
        "containerDeleteRetentionPolicy": {
          "enabled": "[parameters('blobContainerDeleteRetentionPolicyEnabled')]",
          "days": "[parameters('blobContainerDeleteRetentionDays')]"
        }
      }
    }
  ],
  "outputs": {
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
    }
  }
}